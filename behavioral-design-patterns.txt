Behavioral patterns describe how classes and objects interact and communicate with each other.

--------------------------------- 
 Chain of Responsibility Pattern
---------------------------------
• What does it say ?
    Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request.
    Chain the receiving objects and pass the request along the chain until an object handles it.

    This pattern lets you pass requests along a chain of handlers.
    Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.

• Example:
    1. ATM machine implementation
    2. try-catch block
    3. java.util.logging.Logger#log()
    4. javax.servlet.Filter#doFilter()

• Pitfalls:
    1. Mostly, it can get broken easily:
       > If a processor fails to call the next processor, the command gets dropped
       > If a processor calls the wrong processor, it can lead to a cycle
    2. There is no guarantee provided in the pattern that a request will be handled. Request can traverse through the whole chain
       and fall off at the other end without ever being processed and we won't know it.
    3. It can create deep stack traces, which can affect performance.
    4. It can lead to duplicate code across processors, increasing maintenance.


----------------- 
 Command Pattern
-----------------
• What does it say ?
    

• Example:


• Pitfalls: